@page "/Game"
@using BlazorApp.Controller.Enums
@using BlazorApp.Controller.Factory

@inject Identification identification
@inject IModalService modal
@inject NavigationManager NavManager

<h3>Game</h3>

@if (identification.Player != null)
{
    <style>
        .tile {
            background: red;
            display: flex;
            justify-content: center;

            border: 1px solid;
            height: 50px;
            font-size: 0.8em;
        }
    </style>
    <p>Game difficulty : @identification.Game.Difficuty</p>
    <button @onclick="MyShips"class="btn btn-primary">My ships</button>
    <button @onclick="IaShips"class="btn btn-primary">Small peepee mode.</button>
    @if (identification.Game.IsFinished)
    {
        NavManager.NavigateTo("/End");
    }
    @if (identification.Game.IsPlayerTurn)
    {
        <button @onclick="PlayerPlay"class="btn btn-primary">Enter Coordinate</button>
    }
    @if (!identification.Game.IsPlayerTurn)
    {
        <button @onclick="IaPlay"class="btn btn-primary">Makes Ia Play</button>
    }
    <div class="container">
        <div class="row">
            <div class="col">
                <p>You :</p>
                @((MarkupString)DrawFiring(identification.Game.Player.FiringBoard))
            </div>
            <div class="col">
                <p>IA :</p>
                @((MarkupString)DrawFiring(identification.Game.Ia.FiringBoard))
            </div>
        </div>
    </div>
}

@code {
    public string X;
    public string Y;

    public void MyShips()
    {
        modal.Show<MyShips>("Modal Popup Example");
    }

    public void IaShips()
    {
        modal.Show<IaShips>("Modal Popup Example");
    }

    public void IaPlay()
    {
        identification.Game.IsPlayerTurn = identification.Game.IaShoot2();
        this.StateHasChanged();
        if (identification.Game.IsFinished)
        {
            NavManager.NavigateTo("/End");
        }
    }

    public void PlayerPlay()
    {
        modal.Show<Coordinate>("Modal Popup Example");
        this.StateHasChanged();
    }

    public string Debug(GameBoard gb)
    {
        string temp = "<div class=\"container\" style=\"width: 800px\">";
        int index = 0;
        for(int h = 0; h < gb.Height; h++)
        {
            temp += "<div class=\"row\">";
            for(int w = 0; w < gb.Width; w++)
            {
                index = w * gb.Width + h;
                string color = "";
                if(gb.Tiles[index].OccupationType == Occupation.Empty)
                {
                    color = "background-color: red;";
                }
                else
                {
                    if (gb.Tiles[index].OccupationType == Occupation.Near)
                    {
                        color = "background-color: blue;";
                    }
                    else
                    {
                        color = "background-color: green;";
                    }
                }
                temp += $"<div class=\"col\" style=\"{color}justify-content: center;display: flex;border: 1px solid;height:50px\">{Utility.DescriptionAttr(identification.Player.GameBoard.Tiles[index].OccupationType)}</div>";
            }
            temp += "</div>";
        }
        temp += "</div>";
        return temp;
    }

    public string DrawFiring(GameBoard f)
    {
        string temp = "<div class=\"container\" style=\"width: 750px\">";
        int index = 0;
        for(int h = 0; h < f.Height; h++)
        {
            temp += "<div class=\"row\">";
            for(int w = 0; w < f.Width; w++)
            {
                index = w * f.Width + h;
                string color = "";
                if(f.Tiles[index].IsShot)
                {
                    color = "background-color: purple;";
                    if (f.Tiles[index].IsABoat())
                    {
                        color = "background-color: green;";
                    }
                }
                else
                {
                    color = "background-color: red;";
                }
                string content = "";
                if(f.Tiles[index].IsShot){
                    if (f.Tiles[index].IsABoat())
                    {
                        content = Utility.DescriptionAttr(f.Tiles[index].OccupationType);
                    }
                    else
                    {
                        content = "";
                    }
                }
                else
                {
                    Tile t = f.Tiles[index];
                    content = $"{t.X}/{t.Y}";
                }
                temp += $"<div class=\"col\" style=\"{color}justify-content: center;display: flex;border: 1px solid;height:50px\">{content}</div>";
            }
            temp += "</div>";
        }
        temp += "</div>";
        return temp;
    }
}

@page "/LogIn"
@using BlazorApp.Models;
@using Microsoft.Extensions.Logging;
@using System.Security.Cryptography;
@using System.Text;
@using DataLibrary;
@using Microsoft.Extensions.Configuration;
@inject Identification identification
@inject IDataAccess _data
@inject IConfiguration _config

<link href="/css/LogIn.css" rel="stylesheet" />

<div class="container">
		<div class="row">
			<div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
				<div class="errorContainer">
				</div>
				<div class="card card-signin my-5">
					<div class="card-body">
						<h5 class="card-title text-center">Log in</h5>
						<EditForm Model="@identification" OnValidSubmit="@HandleValidSubmit">
							<DataAnnotationsValidator />
							<ValidationSummary />
							<div class="form-label-group">
								<InputText id="inputLogin" class="form-control" @bind-Value="identification.Login" />
								<label for="inputLogin">Login</label>
							</div>
							<div class="form-label-group">
								<InputText type="password" id="inputPassword" class="form-control" placeholder="Mot de passe" @bind-Value="identification.Password" />
								<label for="inputPassword">Mot de passe</label>
							</div>
							<button class="btn btn-lg btn-primary btn-block text-uppercase" type="submit">Connect</button>
						</EditForm>
					</div>
				</div>
			</div>
		</div>
	</div>



<p>Etat connexion : @identification.Connected</p>

@code {
	List<UserModel> user;
	bool CorrectPassword;

	private async Task GetUser()
	{
		string sql = "select * from user where login like'"+identification.Login+"'";

		user = await _data.LoadData<UserModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
	}

	private async Task PasswordHash()
	{
		using (SHA256 sha256Hash = SHA256.Create())
		{
			byte[] sourceBytes = Encoding.UTF8.GetBytes(identification.Password);
			byte[] hashBytes = sha256Hash.ComputeHash(sourceBytes);
			string hash = BitConverter.ToString(hashBytes).Replace("-", String.Empty);
			identification.Password = hash;
		}
	}

	private async Task CheckPassword()
	{
		CorrectPassword = false;
		await PasswordHash();

		if(user[0].Password == identification.Password)
		{
			CorrectPassword = true;
		}
	}

	private async Task HandleValidSubmit()
	{
		await GetUser();
		await CheckPassword();

		if(CorrectPassword == true)
		{
			identification.LogIn(user[0].Login, user[0].IsAdmin, user[0].IsMale);
		}
		
    }
}
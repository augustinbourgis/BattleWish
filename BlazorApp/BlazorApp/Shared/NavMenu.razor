@using BlazorApp.Models
@using DataLibrary
@inject Identification identification
@inject NavigationManager NavManager
@inject IDataAccess _data
@inject IConfiguration _config
<link href="/css/NavBar.css" rel="stylesheet" />

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BattleWish</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @{
            <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <img src="/img/anchor.svg" alt="Person" class="iconNavBar">
                <span class="oi" aria-hidden="true"></span> Home
            </NavLink>
            </div>
            if (!identification.Connected)
            {
               <div class="nav-item px-3">
                <NavLink class="nav-link" href="LogIn">
                    <span class="oi oi-person" aria-hidden="true"></span> LogIn
                </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Registration">
                        <span class="oi oi-person" aria-hidden="true"></span> Sign up
                    </NavLink>
                </div> 
            }
            
            if (identification.Connected)
            {
                <div class="nav-item px-3">
                <NavLink class="nav-link" href="Game">
                    <img src="/img/ship.svg" alt="Person" class="iconNavBar">
                    <span class="oi" aria-hidden="true"></span> Game
                </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Map">
                        <img src="/img/flag.svg" alt="Person" class="iconNavBar">
                        <span class="oi" aria-hidden="true"></span> Map
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="PersonalSpace">
                        <img src="/img/chest.svg" alt="Person" class="iconNavBar">
                        <span class="oi" aria-hidden="true"></span> Personal space
                    </NavLink>
                </div>
                if (identification.Current.IsAdmin)
                {
                    <div class="nav-item px-3">
                    <NavLink class="nav-link" href="AdministrationSpace">
                        <img src="/img/PirateHat.svg" alt="Person" class="iconNavBar">
                        <span class="oi" aria-hidden="true"></span> Administration
                    </NavLink>
                </div>
                }
            }
            
        }
        
    </nav>
    @{
        if (identification.Connected)
        {

            <div class="customCard">
                @{
                    if (identification.Current.IsMale)
                    {
                        <img src="/img/ManPirate.svg" alt="Person" class="card__image">
                    }
                 }
                 @{
                    if (!identification.Current.IsMale)
                    {
                        <img src="/img/WomanPirate.svg" alt="Person" class="card__image">
                    }
                 }
                <p class="card__name">@identification.Login</p>
                <div class="grid-container">

                    <div class="grid-child-posts">
                    @VictoryCount[0] Victory
                    </div>

                    <div class="grid-child-followers">
                     @DefeatCount[0] Defeat
                    </div>

                </div>
                <button class="btn btn-info" @onclick="LogOut"><span class="glyphicon glyphicon-log-out"></span> Log out</button>
             </div>
        }
    }
    
</div>

@code {
    private bool collapseNavMenu = true;
    List<UserModel> user;
    List<int> VictoryCount;
    List<int> DefeatCount;


    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void LogOut()
    {
        identification.Deconnect();
        NavManager.NavigateTo("/", forceLoad: true);
    }

    private async Task GetVictoryCount()
    {
        string sql = "select count(VictoryForPlayer) from history where PlayerPseudo like'"+identification.Login+"' and VictoryForPlayer = true";

        VictoryCount = await _data.LoadData<int, dynamic>(sql, new { }, _config.GetConnectionString("default"));

    }

    private async Task GetDefeatCount()
    {
        string sql = "select count(VictoryForPlayer) from history where PlayerPseudo like'"+identification.Login+"' and VictoryForPlayer = false";

        DefeatCount = await _data.LoadData<int, dynamic>(sql, new { }, _config.GetConnectionString("default"));

    }

    protected override async Task OnInitializedAsync()
    {
        GetVictoryCount();
        GetDefeatCount();
    }
}
